@page "/app/products/category/manage"
@using Application.Extension.Identity
@using Syncfusion.Blazor.Navigations
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdministrationPolicy")]

<PageTitle>Категории</PageTitle>
<ThreeSectionsTemplate>
	<Col9Template>
		<AdminHomeHeader />
		<NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" BackgroundColor="@BreadCrumbBackgroundColor.SuccessSubtle()"></NetcodeHubBreadCrumb>
		<div class="row bg-primary py-2 mt-3" style="border-radius:20px">
			<div class="col-lg-12 col-sm-12 col-md-12">
				<div class="card border-1 shadow-lg table-responsive mb-2" style="border-radius:20px">
					<div class="card-header p-2">
						<button class="btn btn-outline-primary float-end" @onclick="CreateCategoryBtnClicked">
							<i class="mdi mdi-plus"></i> Создать категорию
						</button>
					</div>
					<div class="card-body">
						<NetcodeHubDataGrid ContentBGColor="@Color.Primary()" HeaderFont="@Font.TimesNewRoman()" HeaderSize="@Size.Large()"
							ContentFont="@Font.Georgia()" DataGridFormat="@DataGridFormat.Striped()" HeaderBGColor="@Color.Danger()">
							<HeaderTemplate>
								<tr>
									<th> № </th>
									<th>ID</th>
									<th>NAME</th>
									<th><span id="manageHeader" style="display:none;">MANAGE</span></th>
								</tr>
							</HeaderTemplate>
							<ContentTemplate>
								@if(CategoriesList == null)
								{
									<tr>
										<td colspan="4" class="text-center mb-2">
											<span>Данные не найдены</span>
										</td>
									</tr>
								}
								else
								{
									var listData = CategoriesList.Skip(SkipValue).Take(TakeValue).ToList();
									int sn = 1;
									@foreach(var item in listData)
									{
										string id = item.Id.ToString();
										<tr @onmouseover="()=>ToggleIcons(id, true)" @onmouseout="()=>ToggleIcons(id, false)" id="td_@item.Id">
											<td>@sn</td>
											<td id="td1_@item.Id">@item.Id</td>
											<td id="td2_@item.Id">@item.Name</td>
											<td>
												<i @onmouseover="()=>ToggleEditIcon(id, true)" @onmouseout="()=>ToggleEditIcon(id, false)" id="editIcon_@item.Id" @onclick="(()=>EditClicked(item))" class="mdi mdi-grease-pencil text-info cursorStyle" style="display:none"></i>
												@if (CanDelete)
												{
													<i id="separatorIcon_@item.Id" class="modal-dialog mdi mdi-dots-vertical text-primary" style="display:none;"></i>
													<i @onmouseover="()=>ToggleDeleteIcon(id, true)" @onmouseout="()=>ToggleDeleteIcon(id, false)" @onclick="(()=>DeleteClicked(item))" id="deleteIcon_@item.Id" class="mdi mdi-delete text-danger cursorStyle" style="display:none"></i>
												}
												else
												{
													<i id="separatorIcon_@item.Id" class="modal-dialog mdi mdi-dots-vertical text-primary" style="display:none;"></i>
													<i @onmouseover="()=>ToggleDeleteIcon(id, true)" @onmouseout="()=>ToggleDeleteIcon(id, false)" id="deleteIcon_@item.Id" class="mdi mdi-delete text-secondary" style="display:none"></i>
												}
											</td>
										</tr>
										{
											sn++;
										}
									}
								}
								@if (Loading)
								{
									<tr>
										<td colspan="4" class="text-center mb-2">
											<div class="spinner-border text-primary" role="status" style="">
												<span class="visually-hidden">Выполняется...</span>
											</div>
										</td>										
									</tr>
								}
							</ContentTemplate>
						</NetcodeHubDataGrid>
					</div>
					<div class="card-footer">
						<SfPager @ref="@Page" PageSize=10 NumericItemsCount=4 TotalItemsCount=CategoriesList.Count() ItemClick="Click"/>	
					</div>
				</div>
			</div>
		</div>		 
	</Col9Template>
	<Col3Template> <Banner/> </Col3Template>
	<FooterTemplate><Footer /></FooterTemplate>
</ThreeSectionsTemplate>
<Confirmation Action="Confirm" BoostrapClass="bg-danger shadow-lg border-1 card-header" @ref="confirmation" Instruction="Вы уверены?" CustomStyle="position:absolute;top:50%;left:40%;"/>
<NetcodeHubToast @ref="ToastComponent" />
<Modal @bind-Open="IsOpen"
	   BootstrapClass="border-danger rounded p-2 ml-2"
	   CustomStyle="position:relative; left:40vw; right:40w; top:30vh;">

	<ContentContent>
		<div class="card border-1 shadow-sm">
			<div class="card-header">				
				<span class="text-center text-danger fw-bold">@ModalTitle</span>
				<i class="mdi mdi-close text-danger fw-bold float-end fs-4 cursorStyle" @onclick="CloseModal"></i>
			</div>
		</div>
		<div class="card-body">
			<EditForm Model="CategoryModel" OnValidSubmit="SaveCategory" >
				<DataAnnotationsValidator />
				<div class="form-group">
					<FloatingText Label="Наименование" @bind-Value="CategoryModel.Name" class="form-control" />
				</div>				
				<div class="form-group mt-3 mb-3">
					@if (Loading)
					{
						<GenericSpinnerButton Text="Сохранение..." ButtonClass="btn btn-danger" />
					}
					else
					{						
						<button type="submit" class="btn btn-danger float-end">Сохранить</button>
					}
				</div>
				<ValidationSummary />				
			</EditForm>
		</div>		
	</ContentContent>
</Modal>

@code {
	string ModalTitle = "Новая категория";
	SfPager? Page;
	NetcodeHubToast? ToastComponent;
	public bool Loading { get; set; } = false;	
	public bool IsOpen { get; set; }
	Confirmation? confirmation;
	public int SkipValue;
	public int TakeValue = 10;		
	[CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }

	private Dictionary<string, string> BreadCrumbs = new Dictionary<string, string>
	{
		{"Home","app/home"},
		{"Manage Categories", null!}
	};

	private IEnumerable<GetCategoryResponseDTO> CategoriesList { get; set; } = [];
	private AddCategoryRequestDTO CategoryModel { get; set; } = new();
	ClaimsPrincipal? User;
	private HubConnection? hubConnection;
	bool CanDelete = false;


	protected async override Task OnInitializedAsync()
	{
		User = (await UserAuthState!).User;
		CanDelete = customAuthorizationService.CustomClaimChecker(User, DefaultClaims.Delete);
		homeGenericState.StateChanged += StateButtonClicked;
		homeGenericState.StateChanged += CreateCategoryBtnClicked;

		await GetCategories();
		hubConnection = connectionService.GetHubConnection();
		hubConnection.On<string>("Notify", async (clientId) =>
		{
			await CallWhenNotified();
		});
		if (hubConnection == null)
			await hubConnection!.StartAsync();
	}

	async Task CallWhenNotified()
	{
		await InvokeAsync(async () =>
		{
			StateHasChanged();
			await adminState.GetActiveOrdersCount();
		});
	}

	void StateButtonClicked()
	{
		string adminOrderUrl = "app/administration/products/orders";
		if (homeGenericState.IsAdmin)
			NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");		
	}	

	async Task GetCategories()
	{
		Loading = true;
		using var scope = serviceProvider.CreateScope();
		var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
		CategoriesList = await mediator.Send(new GetAllCategoriesQuery());	
		Loading = false;
	}

	private async Task ToggleIcons(string itemId = null!, bool isHovering = false) => await js.InvokeVoidAsync("ToggleIcons", itemId, isHovering);
	private async Task ToggleEditIcon(string itemId = null!, bool isHovering = false) => await js.InvokeVoidAsync("ToggleEditIcon", itemId, isHovering);
	private async Task ToggleDeleteIcon(string itemId = null!, bool isHovering = false) => await js.InvokeVoidAsync("ToggleDeleteIcon", itemId, isHovering);

	void OpenModal() => IsOpen = true;

	void CreateCategoryBtnClicked()
	{
		ModalTitle = "Новая категория";
		OpenModal();
	}

	void CloseModal() => IsOpen = false;

	private Guid IdHolder { get; set; } = Guid.Empty;

	async Task SaveCategory()
	{
		Loading = true;
		await Task.Delay(2000);
		ServiceResponse response = new(false, null);
		if (IdHolder != Guid.Empty)
		{
			var update = CategoryModel.Adapt(new UpdateCategoryRequestDTO());
			update.Id = IdHolder;
			using var scope = serviceProvider.CreateScope();
			var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

			response = await mediator.Send(new UpdateCategoryCommand(update));
			await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
				{
					UserId = User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
					Title = "Обновление категории",
					Description = response.Message,
					OperationState = response.Flag,
					Date = DateTime.Now.Date
				});			
		}
		else
		{
			using var scope = serviceProvider.CreateScope();
			var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
			response = await mediator.Send(new CreateCategoryCommand(CategoryModel));
			await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
				{
					UserId = User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
					Title = "Создание категории",
					Description = response.Message,
					OperationState = response.Flag,
					Date = DateTime.Now.Date
				});			
		}

		if (response.Flag)
		{			
			await GetCategories();			
			await ToastComponent!.ShowSuccessToast("Info", response.Message);
			CategoryModel = new();
			CloseModal();
		}
		else
		{
			await ToastComponent!.ShowErrorToast("Alert", response.Message);
		}
		Loading = false;
	}

	public void Click(PagerItemClickEventArgs args)
	{
		SkipValue = (args.CurrentPage * Page!.PageSize) - Page.PageSize;
		TakeValue = Page.PageSize;
	}

	void EditClicked(GetCategoryResponseDTO category)
	{
		ModalTitle = "Обновление категории";
		IdHolder = category.Id;
		category.Adapt(CategoryModel);
		OpenModal();
	}

	void DeleteClicked(GetCategoryResponseDTO category)
	{		
		IdHolder = category.Id;
		category.Adapt(CategoryModel);
		confirmation?.Show();
	}

	async Task Confirm()
	{
		Loading = true;
		await Task.Delay(2000);
		using var scope = serviceProvider.CreateScope();
		var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
		var result = await mediator.Send(new DeleteCategoryCommand(IdHolder));
		await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
			{
				UserId = User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString(),
				Title = "Удаление категории",
				Description = result.Message,
				OperationState = result.Flag,
				Date = DateTime.Now.Date
			});
		if (result.Flag)
		{
			await GetCategories();			
			await ToastComponent!.ShowSuccessToast("Info", result.Message);
			CategoryModel = new();
			IdHolder = Guid.Empty;
		}
		else
		{
			await ToastComponent!.ShowErrorToast("Alert", result.Message);
		}
		Loading = false;
	}

	public void Dispose() => homeGenericState.StateChanged -= StateButtonClicked;

}
