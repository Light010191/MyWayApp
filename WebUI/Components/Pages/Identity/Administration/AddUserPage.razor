@page "/administration/account/create-user"
@rendermode InteractiveServer
@implements IDisposable
<PageTitle>Добавить Пользователя</PageTitle>

<ThreeSectionsTemplate>
	<Col9Template>
		<AdminHomeHeader/>
		<NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" ReloadPageOnClick=true BackgroundColor="@BreadCrumbBackgroundColor.SuccessSubtle()"></NetcodeHubBreadCrumb>
		<div class="card col-xl-10 col-lg-12 bg-light shadow-lg border-0 mt-3" style="border-radius: 5px">
			<div class="card-body bg-light">
				<EditForm Model="UserModel" OnValidSubmit="RegisterAsync">
					<div class="card border-success bg-light shadow-lg text-dark" style="opacity:1" >
						<div class="card-header text-dark fs-4 border-primary text-center">
							<i class="mdi mdi-autorenew menu-icon float-start text-success"></i>
							<span style="font-family:Algerian; letter-spacing:2px" class="fw-bold"></span>
							<button type="reset" class="btn-outline-danger btn-sm float-end">Сбросить</button>
						</div>
						<div class="card-body p-3" style="opacity:1">
							<DataAnnotationsValidator />
							<FloatingText class="form-control mb-3" Label="FullName" Placeholder="Введите Имя" Type="text" @bind-Value="UserModel.Name"></FloatingText>
							<FloatingText class="form-control mb-3" Label="Email Address" Placeholder="Введите Email" Type="text" @bind-Value="UserModel.Email"></FloatingText>
							
							<InputSelect @bind-Value="UserModel.Policy" class="form-select mb-3">
								<option>Выберите Роль</option>
								@foreach(var policy in Policies!)
								{
									<option value="@policy">@policy</option>
								}
							</InputSelect>
							<FloatingText class="form-control mb-3" Label="Пароль" Type="@passwordState.PasswordType" @bind-Value="UserModel.Password" />
							<FloatingText class="form-control mb-3" Label="Подтвердите пароль" Type="@passwordState.PasswordType" @bind-Value="UserModel.ConfirmPassword" />
							<a class="btn btn-link text-decoration-none float-end" style="margin-top:-20px" @onclick="ChangePasswordType"><small>@passwordState.DisplayText</small></a>
							<div class="form-group align-content-end">
								@if (Loading)
								{
									<GenericSpinnerButton ButtonClass="btn btn-success mt-4 w-50 float-end" Text="Создание...."/>
								}
								else{
									<i class="mdi mdi-account-plus menu-icon float-start text-success"></i>
									<span style="font-family:Algerian; letter-spacing:2px" class="fw-bold"></span>
									<button class="btn btn-success mt-4 w-50" type="submit">Создать Пользователя</button>
								}
							</div>
							<hr class="text-primary" />
						</div>

						<div class="card-footer mt-5">
							<ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style:lower-latin; text-align:left"/>
						</div>
					</div>					
				</EditForm>
			</div>
		</div>
	</Col9Template>
	<Col3Template><Banner/></Col3Template>
	<FooterTemplate><Footer/></FooterTemplate>
</ThreeSectionsTemplate>

<NetcodeHubToast @ref="ToastComponent" Duration="4000"/>

@code {
	private Dictionary<string, string> BreadCrumbs = new Dictionary<string, string>
	{	
		{"Home", "app/home"}, 
		{"Add New User", null! }	
	}; 
	[CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
	private CreateUserRequestDTO UserModel { get; set; } = new();	
	NetcodeHubToast? ToastComponent;
	private bool Loading = false;
	private HubConnection? hubConnection;
	List<string> Policies = new List<string>()
	{
		new string(Policy.AdminPolicy),
		new string(Policy.ManagerPolicy),
		new string(Policy.UserPolicy)
	};
	


	protected async override Task OnInitializedAsync()
	{
		if (!customAuthorizationService.CustomClaimChecker((await UserAuthState!).User, Application.Extension.Identity.DefaultClaims.ManageUser))
			NavManager.NavigateTo("Account/Access-Denied");

		passwordState.Changed += StateHasChanged;
		homeGenericState.StateChanged += StateButtonClicked;
		hubConnection = connectionService.GetHubConnection();
		hubConnection.On<string>("Notify", async (clientId) =>
			{
				await CallWhenNotified();
			});
		if (hubConnection == null)
			await hubConnection!.StartAsync();
	}

	async Task CallWhenNotified()
	{
		await InvokeAsync(async () =>
		{
			StateHasChanged();
			await adminActiveOrderCountState.GetActiveOrdersCount();
		});
	}

	private async Task RegisterAsync()
	{
		Loading = true;
		await Task.Delay(3000);	
		var response = await accountService.CreateUserAsync(UserModel);
		
		await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
			{
				UserId = (await UserAuthState!).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value,
				Title = "Создание нового пользователя",
				Description = response.Message,
				OperationState = response.Flag,
				Date = DateTime.Now.Date
			});
		if (response.Flag)
		{
			await ToastComponent!.ShowSuccessToast("Info", response.Message);
			UserModel = new();
		}
		else
		{
			await ToastComponent!.ShowErrorToast("Alert", response.Message);
		}
		Loading = false;
	}
	

	void StateButtonClicked()
	{
		string adminOrderUrl = "app/adminisration/products/orders";
		if (homeGenericState.IsAdmin)
			NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
	}

	void ChangePasswordType() => passwordState.ChangePasswordType();

	public void Dispose()
	{
		homeGenericState.StateChanged -= StateButtonClicked;
		passwordState.Changed -= StateHasChanged;
	}
}
